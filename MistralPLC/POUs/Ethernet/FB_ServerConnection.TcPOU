<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.4">
  <POU Name="FB_ServerConnection" Id="{14b39016-a507-4185-9be6-a99db4281765}" SpecialFunc="None">
    <Declaration><![CDATA[/// This function block implements simple TCP/IP server protocol. 
FUNCTION_BLOCK FB_ServerConnection
VAR_IN_OUT
	/// Server connection handle 
	hServer: T_HSERVER;
	/// TX fifo 
	fbTx: FB_FrameFifo;
	/// RX fifo 
	fbRx: FB_FrameFifo;
	/// Log/debug/error fifo 
	fbLog: FB_LogFifo;
END_VAR
VAR_INPUT
	/// TwinCAT TCP/IP server network address 
	sSrvNetID: T_AmsNetID := '';
	/// TRUE => Enable/connect, FALSE => Disable/disconnect 
	bEnable: BOOL := FALSE;
	/// Try to reconnect after this time 
	tReconnect: TIME := TIME#1s0ms;
	/// TRUE => Enable log message output, FALSE => Disable 
	bLog: BOOL := FALSE;
	/// Log message description string (allows the identification of log message source) 
	sPrefix: STRING := 'SERVER::';
END_VAR
VAR_OUTPUT
	/// TCP/IP connection state 
	eState: E_SocketConnectionState := eSOCKET_DISCONNECTED;
END_VAR
VAR
	/// Create/release TCP/IP connection 
	fbConnect: FB_ServerClientConnection;
	/// Send TCP/IP data 
	fbSend: FB_SocketSend;
	/// Receive TCP/IP data 
	fbReceive: FB_SocketReceive;
	/// Global state 
	nState: BYTE;
	/// Tx state 
	bSndBusy: BOOL;
	/// Rx state 
	bRcvBusy: BOOL;
	/// Disconnect flag, if set the socket will be closed 
	bDisconnect: BOOL;
	/// Receive poll timer 
	fbPollTimer: TON;
	/// Request timeout timer 
	fbRequestTimer: TON;
	/// Reconnect timer 
	fbReconnectTimer: TON;
	/// Count of received data bytes 
	cbReceived: UDINT;
	/// Byte length of received string 
	cbRx: UDINT;
	/// Temp. RX buffer 
	buffer: ARRAY[0..PLCPRJ_BUFFER_SIZE] OF BYTE;
	sTxFrame: T_MaxString;
	sRxFrame: T_MaxString;
	i: UDINT;
	bAbort: BOOL;
	bTest:BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[CASE nState OF
	0:(* Connect *)
		fbConnect( 	eMode := eACCEPT_ALL, tReconnect := tReconnect, bEnable := bEnable, 
					hServer := hServer, eState => eState );
		IF NOT fbConnect.bBusy THEN
			IF NOT fbConnect.bError THEN
				IF eState = eSOCKET_CONNECTED THEN(* We are connected *)

					fbTx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(sender)::' ), bLog := bLog );(* Clear TX fifo (optional) *)
					fbRx.Clear( sPrefix := CONCAT( sPrefix, 'FB_FrameFifo(receiver)::' ), bLog := bLog );(* Clear RX fifo (optional) *)
					fbLog.Clear( sPrefix := sPrefix, bLog := bLog );(* Clear log fifo (optional) *)
					bSndBusy := FALSE;
					bRcvBusy := FALSE;
					bDisconnect := FALSE;
					cbReceived := 0;

					fbPollTimer( IN := FALSE, PT := T#0S );
					fbRequestTimer( IN := FALSE, PT := PLCPRJ_RECEIVE_TIMEOUT );
					fbReconnectTimer( IN := FALSE, PT := tReconnect );

					fbLog.Message( sMessage := 'Connection established!', hSocket := fbConnect.hSocket );
					nState := 1;
				END_IF
			ELSE(* Error => log error *)
				fbLog.Error( sMessage := 'FB_ServerClientConnection()', nErrID := fbConnect.nErrID );
			END_IF
		END_IF

	1:(* Data exchange state *)
	bTest:=TRUE;
		bDisconnect := NOT bEnable OR bDisconnect;(* User/internal disconnect requested? *)
		IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN
			bDisconnect := FALSE;
			fbLog.Message( sMessage := 'Closing connection!', hSocket := fbConnect.hSocket );
			nState := 2;(* Disconnect *)
		ELSE

			(* ------------------------ Get rx data --------------------------------------- *)
			IF NOT bDisconnect AND NOT bRcvBusy THEN

				fbPollTimer( IN := TRUE );
				IF fbPollTimer.Q THEN
					IF fbRx.cbFree >= SIZEOF(sRxFrame) THEN(* Check free rx fifo space *)
						fbPollTimer( IN := FALSE, PT := PLCPRJ_RECEIVE_POLLING_TIME );
						fbReceive( bExecute := FALSE );
						fbReceive( sSrvNetId	:= sSrvNetID,
									hSocket		:= fbConnect.hSocket,
									cbLen		:= SIZEOF(buffer) - cbReceived,
									pDest		:= ADR(buffer) + cbReceived,
									bExecute	:= TRUE );
						bRcvBusy := TRUE;
					END_IF
				END_IF
				
			ELSE(* Wait until receive not busy *)
				
				fbReceive( bExecute := FALSE );
				IF NOT fbReceive.bBusy THEN
					bRcvBusy := FALSE;
					IF NOT fbReceive.bError THEN
						IF fbReceive.nRecBytes > 0 THEN(* Bytes received *)
							
							fbPollTimer( IN := FALSE, PT := T#0S );(* Bytes received => increase the read (polling) speed *)
							fbRequestTimer( IN := FALSE );(* Bytes received => disable timeout check *)
							cbReceived := cbReceived + fbReceive.nRecBytes;(* Calculate the number of received data bytes *)

							(* Parse received bytes and extract strings *)
							REPEAT
								bAbort := TRUE;(* Set flag *)
								IF cbReceived > 0 THEN

									(* Search for string null delimiter *)
									FOR i:= 0 TO cbReceived - 1 BY 1 DO
										IF buffer[i] = 0 THEN (* End of string position found *)

											cbRx := i + 1;(* Calculate the length of string (inclusive the end delimiter) *)
											MEMCPY( ADR(sRxFrame), ADR(buffer), MIN(cbRx, SIZEOF(sRxFrame) ) );(* Copy string bytes to fifo input variable *)

											fbRx.AddTail( sPut := sRxFrame );(* Add string to the rx fifo *)
											IF fbRx.bOk THEN

												MEMMOVE( ADR(buffer), ADR(buffer) + cbRx, cbReceived - cbRx );(* Move/shift remaining bytes in buffer *)
												cbReceived := cbReceived - cbRx;(* Recalculate the remaining data length *)

												IF fbRx.cbFree >= SIZEOF(sRxFrame) THEN(* Check free rx fifo space *)
													bAbort := FALSE;(* Reset flag, try to parse the next string  *)
												END_IF

											ELSE(* Fifo overflow => log error and disconnect *)
												fbLog.Error( sMessage := 'FB_FrameFifo(receiver)', nErrID := PLCPRJ_ERROR_RECFIFO_OVERFLOW );
												bDisconnect := TRUE;(* Set flag *)
												RETURN;
											END_IF

											EXIT;
										END_IF
									END_FOR

								END_IF (* IF cbReceived > 0 THEN *)

							UNTIL bAbort
							END_REPEAT

						ELSE(* No bytes received *)
							fbRequestTimer( IN := TRUE );(* No bytes received => enable timeout check *)
							IF fbRequestTimer.Q THEN (* Timeout error*)
								fbRequestTimer( IN := FALSE );
								fbLog.Error( sMessage := 'FB_SocketReceive()', nErrID := PLCPRJ_ERROR_RECEIVE_TIMEOUT );
								bDisconnect := TRUE;(* Set flag *)
							END_IF							
						END_IF(* IF fbReceive.nRecBytes > 0 THEN *)
					ELSE(* Receive error => log error and disconnect *)
						fbLog.Error( sMessage := 'FB_SocketReceive()', nErrID := fbReceive.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF
			
			END_IF(* IF NOT bDisconnect AND NOT bRcvBusy THEN *)
			(* ---------------------------------------------------------------------------- *)


			(* --------------------------- Send tx data ----------------------------------- *)
		(*	IF NOT bDisconnect AND NOT bSndBusy THEN
				fbTx.RemoveHead( sGet => sTxFrame );(* Remove oldest string entry s*)
				IF fbTx.bOk THEN(* Success *)
					fbSend( bExecute := FALSE );
					fbSend(	sSrvNetID 	:= sSrvNetID,
							hSocket		:= fbConnect.hSocket,
							cbLen		:= INT_TO_UDINT(LEN( sTxFrame )) + 1,(* Send string inclusive string (null) delimiter! *)
							pSrc		:= ADR( sTxFrame ),(* Address of the string variable *)
							bExecute	:= TRUE );
					bSndBusy := TRUE;
				END_IF
			ELSE(* Wait until send not busy *)
				fbSend( bExecute := FALSE );
				IF NOT fbSend.bBusy THEN
					bSndBusy := FALSE;
					IF fbSend.bError THEN(* Send error => log error and disconnect *)
						fbLog.Error( sMessage := 'FB_SocketSend()', nErrID := fbSend.nErrId );
						bDisconnect := TRUE;(* Set flag *)
					END_IF
				END_IF
			END_IF(* IF NOT bDisconnect AND NOT bSndBusy THEN *)
			*)
			(* ---------------------------------------------------------------------------- *)

			
		END_IF(* IF bDisconnect AND NOT bSndBusy AND NOT bRcvBusy THEN *)


	2:(* Disconnect *)
		fbConnect( hServer := hServer, bEnable:= FALSE, eState=>eState );
		IF eState = eSOCKET_DISCONNECTED THEN
			fbReconnectTimer( IN := TRUE );(* Please wait some seconds and then try to connect again *)
			IF fbReconnectTimer.Q THEN
				fbReconnectTimer( IN := FALSE );
				nState := 0;
			END_IF
		END_IF

END_CASE
]]></ST>
    </Implementation>
    <LineIds Name="FB_ServerConnection">
      <LineId Id="3" Count="28" />
      <LineId Id="284" Count="0" />
      <LineId Id="32" Count="112" />
      <LineId Id="222" Count="0" />
      <LineId Id="145" Count="16" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>